import React, { useState, useEffect } from 'react';
import { auth } from '../services/firebase';
import firebaseService from '../services/firebaseService';
import ideaValidationService from '../services/ideaValidationService';
import Button from '../components/Button';

const IdeaValidator = () => {
  // Authentication & User State
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Wizard State
  const [currentStep, setCurrentStep] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [showResults, setShowResults] = useState(false);

  // Form Data
  const [formData, setFormData] = useState({
    ideaName: '',
    ideaDescription: '',
    // C.N.E.S.T. Scores (1-10)
    curiosity: 5,
    need: 5,
    ease: 5,
    scale: 5,
    time: 5
  });

  // Calculated Results
  const [results, setResults] = useState({
    totalScore: 0,
    averageScore: 0,
    verdict: '',
    recommendation: '',
    strengths: [],
    improvements: []
  });

  // C.N.E.S.T. Framework Questions
  const steps = [
    {
      id: 'intro',
      title: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Idea Validator',
      subtitle: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
      type: 'intro'
    },
    {
      id: 'idea-info',
      title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      subtitle: '‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
      type: 'form'
    },
    {
      id: 'curiosity',
      title: 'üîç Curiosity - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à',
      subtitle: '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏°‡∏≤‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?',
      question: '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ü‡∏±‡∏á ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',
      type: 'cnest',
      key: 'curiosity',
      options: [
        { value: 1, label: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏ô‡πÉ‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏Å' },
        { value: 3, label: '‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏â‡∏¢‡πÜ' },
        { value: 5, label: '‡∏Ñ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô' },
        { value: 7, label: '‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠' },
        { value: 10, label: '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°' }
      ]
    },
    {
      id: 'need',
      title: 'üéØ Need - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
      subtitle: '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?',
      question: '‡∏Ñ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      type: 'cnest',
      key: 'need',
      options: [
        { value: 1, label: '‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà Nice to have ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏î‡πâ' },
        { value: 3, label: '‡∏°‡∏µ‡∏ö‡πâ‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å' },
        { value: 5, label: '‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£' },
        { value: 7, label: '‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏¢‡∏≠‡∏°‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏Å‡πâ' },
        { value: 10, label: '‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏î‡πà‡∏ß‡∏ô' }
      ]
    },
    {
      id: 'ease',
      title: '‚ö° Ease - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢',
      subtitle: '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ?',
      question: '‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏±‡∏Å‡∏©‡∏∞ ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏´‡∏ô?',
      type: 'cnest',
      key: 'ease',
      options: [
        { value: 1, label: '‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏•‡πâ‡∏≤‡∏ô' },
        { value: 3, label: '‡∏¢‡∏≤‡∏Å‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏¢‡∏≠‡∏∞' },
        { value: 5, label: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤' },
        { value: 7, label: '‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' },
        { value: 10, label: '‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ' }
      ]
    },
    {
      id: 'scale',
      title: 'üìà Scale - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡πÇ‡∏ï',
      subtitle: '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?',
      question: '‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?',
      type: 'cnest',
      key: 'scale',
      options: [
        { value: 1, label: '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ' },
        { value: 3, label: '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≥‡πÄ‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞' },
        { value: 5, label: '‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®' },
        { value: 7, label: '‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®' },
        { value: 10, label: '‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏•‡∏Å ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£' }
      ]
    },
    {
      id: 'time',
      title: '‚è∞ Time - ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤',
      subtitle: '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      question: '‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ï‡∏•‡∏≤‡∏î ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏≠‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?',
      type: 'cnest',
      key: 'time',
      options: [
        { value: 1, label: '‡∏¢‡∏±‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' },
        { value: 3, label: '‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏´‡∏°‡∏≤‡∏∞ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ' },
        { value: 5, label: '‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏ß' },
        { value: 7, label: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô' },
        { value: 10, label: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤' }
      ]
    },
    {
      id: 'results',
      title: 'üéâ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
      subtitle: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö C.N.E.S.T.',
      type: 'results'
    }
  ];

  // Authentication Check
  useEffect(() => {
    const unsubscribe = firebaseService.onAuthStateChange((currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        setIsAuthenticated(true);
        setLoading(false);
      } else {
        setUser(null);
        setIsAuthenticated(false);
        setLoading(false);
        window.location.hash = '#auth';
      }
    });

    return () => unsubscribe();
  }, []);

  // Calculate Results whenever CNEST scores change
  useEffect(() => {
    calculateResults();
  }, [formData.curiosity, formData.need, formData.ease, formData.scale, formData.time]);

  // Calculate C.N.E.S.T. Results
  const calculateResults = () => {
    const { curiosity, need, ease, scale, time } = formData;
    const totalScore = curiosity + need + ease + scale + time;
    const averageScore = totalScore / 5;

    let verdict = '';
    let recommendation = '';
    const strengths = [];
    const improvements = [];

    // Score Analysis
    const scores = { curiosity, need, ease, scale, time };
    const scoreNames = {
      curiosity: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à',
      need: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
      ease: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢',
      scale: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡πÇ‡∏ï',
      time: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤'
    };

    // Find strengths (score >= 7)
    Object.entries(scores).forEach(([key, score]) => {
      if (score >= 7) {
        strengths.push(scoreNames[key]);
      } else if (score <= 4) {
        improvements.push(scoreNames[key]);
      }
    });

    // Overall Verdict
    if (averageScore >= 8) {
      verdict = 'üöÄ ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏à‡πã‡∏á! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢';
      recommendation = '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ MVP (Minimum Viable Product) ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å';
    } else if (averageScore >= 6.5) {
      verdict = 'üëç ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏≤‡∏á‡∏à‡∏∏‡∏î';
      recommendation = '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏ç‡πà';
    } else if (averageScore >= 5) {
      verdict = 'ü§î ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡∏°‡πà';
      recommendation = '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤';
    } else {
      verdict = '‚ö†Ô∏è ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á';
      recommendation = '‡∏Ñ‡∏ß‡∏£‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏ç‡πà';
    }

    setResults({
      totalScore,
      averageScore,
      verdict,
      recommendation,
      strengths,
      improvements
    });
  };

  // Handle form input changes
  const handleInputChange = (key, value) => {
    setFormData(prev => ({
      ...prev,
      [key]: value
    }));
  };

  // Navigation functions
  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(prev => prev + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const goToResults = () => {
    setCurrentStep(steps.length - 1);
    setShowResults(true);
  };

  // Save results to Firestore
  const saveResults = async () => {
    if (!user) return;

    try {
      const resultData = {
        userId: user.uid,
        userEmail: user.email,
        ideaName: formData.ideaName,
        ideaDescription: formData.ideaDescription,
        scores: {
          curiosity: formData.curiosity,
          need: formData.need,
          ease: formData.ease,
          scale: formData.scale,
          time: formData.time
        },
        results: results
      };

      // Save to Firestore using ideaValidationService
      await ideaValidationService.saveValidation(resultData);

      alert('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
    } catch (error) {
      console.error('Error saving results:', error);
      alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ' + error.message);
    }
  };

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        </div>
      </div>
    );
  }

  // Not authenticated
  if (!isAuthenticated || !user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
          <p className="text-gray-600 mb-6">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢</p>
          <Button variant="primary" onClick={() => window.location.hash = '#auth'}>
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </Button>
        </div>
      </div>
    );
  }

  const currentStepData = steps[currentStep];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={() => window.location.hash = '#dashboard'}
                className="mr-4 p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                ‚Üê ‡∏Å‡∏•‡∏±‡∏ö
              </button>
              <h1 className="text-xl font-bold text-gray-900">Idea Validator</h1>
            </div>
            <div className="text-sm text-gray-500">
              ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô {currentStep + 1} ‡∏à‡∏≤‡∏Å {steps.length}
            </div>
          </div>
        </div>
      </header>

      {/* Progress Bar */}
      <div className="bg-white border-b">
        <div className="max-w-4xl mx-auto px-4">
          <div className="h-2 bg-gray-200 rounded-full">
            <div 
              className="h-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-500"
              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
            ></div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-white rounded-2xl shadow-lg p-8">
          {/* Step Content */}
          {currentStepData.type === 'intro' && (
            <div className="text-center">
              <div className="mb-8">
                <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-6">
                  <span className="text-3xl">üöÄ</span>
                </div>
                <h2 className="text-4xl font-bold text-gray-900 mb-4">
                  {currentStepData.title}
                </h2>
                <p className="text-xl text-gray-600 mb-8">
                  {currentStepData.subtitle}
                </p>
              </div>

              <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-8 mb-8">
                <h3 className="text-2xl font-semibold text-gray-800 mb-4">
                  ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô C.N.E.S.T.
                </h3>
                <div className="grid md:grid-cols-5 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-2xl mb-2">üîç</div>
                    <div className="font-semibold">Curiosity</div>
                    <div className="text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl mb-2">üéØ</div>
                    <div className="font-semibold">Need</div>
                    <div className="text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl mb-2">‚ö°</div>
                    <div className="font-semibold">Ease</div>
                    <div className="text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl mb-2">üìà</div>
                    <div className="font-semibold">Scale</div>
                    <div className="text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡πÇ‡∏ï</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl mb-2">‚è∞</div>
                    <div className="font-semibold">Time</div>
                    <div className="text-gray-600">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</div>
                  </div>
                </div>
              </div>

              <Button 
                variant="primary" 
                size="lg" 
                onClick={nextStep}
              >
                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ ‚Üí
              </Button>
            </div>
          )}

          {currentStepData.type === 'form' && (
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-2">
                {currentStepData.title}
              </h2>
              <p className="text-lg text-gray-600 mb-8">
                {currentStepData.subtitle}
              </p>

              <div className="space-y-6">
                <div>
                  <label className="block text-lg font-medium text-gray-700 mb-3">
                    ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
                  </label>
                  <input
                    type="text"
                    value={formData.ideaName}
                    onChange={(e) => handleInputChange('ideaName', e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏≠‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
                  />
                </div>

                <div>
                  <label className="block text-lg font-medium text-gray-700 mb-3">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢
                  </label>
                  <textarea
                    value={formData.ideaDescription}
                    onChange={(e) => handleInputChange('ideaDescription', e.target.value)}
                    placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡∏™‡∏±‡∏á‡πÄ‡∏Ç‡∏õ..."
                    rows={4}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
                  />
                </div>
              </div>

              <div className="flex justify-between mt-8">
                <Button variant="secondary" onClick={prevStep}>
                  ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                </Button>
                <Button 
                  variant="primary" 
                  onClick={nextStep}
                  disabled={!formData.ideaName || !formData.ideaDescription}
                >
                  ‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‚Üí
                </Button>
              </div>
            </div>
          )}

          {currentStepData.type === 'cnest' && (
            <div>
              <h2 className="text-3xl font-bold text-gray-900 mb-2">
                {currentStepData.title}
              </h2>
              <p className="text-lg text-gray-600 mb-6">
                {currentStepData.subtitle}
              </p>
              
              <div className="bg-blue-50 rounded-lg p-4 mb-8">
                <p className="text-lg text-gray-800 font-medium">
                  {currentStepData.question}
                </p>
              </div>

              <div className="space-y-3 mb-8">
                {currentStepData.options.map((option) => (
                  <label
                    key={option.value}
                    className={`block p-4 border-2 rounded-lg cursor-pointer transition-colors ${
                      formData[currentStepData.key] === option.value
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-blue-300'
                    }`}
                  >
                    <input
                      type="radio"
                      name={currentStepData.key}
                      value={option.value}
                      checked={formData[currentStepData.key] === option.value}
                      onChange={(e) => handleInputChange(currentStepData.key, parseInt(e.target.value))}
                      className="sr-only"
                    />
                    <div className="flex items-center">
                      <div className={`w-4 h-4 rounded-full border-2 mr-3 ${
                        formData[currentStepData.key] === option.value
                          ? 'border-blue-500 bg-blue-500'
                          : 'border-gray-300'
                      }`}>
                        {formData[currentStepData.key] === option.value && (
                          <div className="w-2 h-2 bg-white rounded-full m-auto mt-0.5"></div>
                        )}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">
                          ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {option.value}/10
                        </div>
                        <div className="text-gray-600">
                          {option.label}
                        </div>
                      </div>
                    </div>
                  </label>
                ))}
              </div>

              {/* Real-time Score Display */}
              <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 mb-8">
                <div className="text-center">
                  <div className="text-3xl font-bold text-blue-600 mb-2">
                    {formData[currentStepData.key]}/10
                  </div>
                  <div className="text-sm text-gray-600">
                    ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {results.totalScore}/50 | ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {results.averageScore.toFixed(1)}/10
                  </div>
                </div>
              </div>

              <div className="flex justify-between">
                <Button variant="secondary" onClick={prevStep}>
                  ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                </Button>
                <Button variant="primary" onClick={nextStep}>
                  ‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‚Üí
                </Button>
              </div>
            </div>
          )}

          {currentStepData.type === 'results' && (
            <div>
              <div className="text-center mb-8">
                <h2 className="text-4xl font-bold text-gray-900 mb-4">
                  {currentStepData.title}
                </h2>
                <p className="text-lg text-gray-600">
                  {currentStepData.subtitle}
                </p>
              </div>

              {/* Results Summary */}
              <div className="grid md:grid-cols-2 gap-8 mb-8">
                {/* Score Breakdown */}
                <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl p-6">
                  <h3 className="text-xl font-bold text-gray-900 mb-4">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span>üîç Curiosity (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à)</span>
                      <span className="font-bold text-blue-600">{formData.curiosity}/10</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>üéØ Need (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)</span>
                      <span className="font-bold text-green-600">{formData.need}/10</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>‚ö° Ease (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢)</span>
                      <span className="font-bold text-yellow-600">{formData.ease}/10</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>üìà Scale (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡πÇ‡∏ï)</span>
                      <span className="font-bold text-purple-600">{formData.scale}/10</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>‚è∞ Time (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤)</span>
                      <span className="font-bold text-red-600">{formData.time}/10</span>
                    </div>
                    <hr className="my-4" />
                    <div className="flex justify-between items-center text-lg font-bold">
                      <span>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</span>
                      <span className="text-2xl text-blue-600">{results.totalScore}/50</span>
                    </div>
                    <div className="flex justify-between items-center text-lg font-bold">
                      <span>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</span>
                      <span className="text-2xl text-purple-600">{results.averageScore.toFixed(1)}/10</span>
                    </div>
                  </div>
                </div>

                {/* Verdict */}
                <div className="bg-white border-2 border-gray-200 rounded-xl p-6">
                  <h3 className="text-xl font-bold text-gray-900 mb-4">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</h3>
                  <div className="text-center mb-6">
                    <div className="text-4xl mb-4">{results.verdict.split(' ')[0]}</div>
                    <div className="text-xl font-bold text-gray-800 mb-4">
                      {results.verdict.substring(2)}
                    </div>
                    <p className="text-gray-600 leading-relaxed">
                      {results.recommendation}
                    </p>
                  </div>
                </div>
              </div>

              {/* Strengths & Improvements */}
              <div className="grid md:grid-cols-2 gap-6 mb-8">
                {results.strengths.length > 0 && (
                  <div className="bg-green-50 rounded-lg p-6">
                    <h4 className="font-bold text-green-800 mb-3">üéØ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á</h4>
                    <ul className="space-y-2">
                      {results.strengths.map((strength, index) => (
                        <li key={index} className="text-green-700">
                          ‚úÖ {strength}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {results.improvements.length > 0 && (
                  <div className="bg-orange-50 rounded-lg p-6">
                    <h4 className="font-bold text-orange-800 mb-3">üîß ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</h4>
                    <ul className="space-y-2">
                      {results.improvements.map((improvement, index) => (
                        <li key={index} className="text-orange-700">
                          ‚ö†Ô∏è {improvement}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              {/* Actions */}
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button 
                  variant="primary" 
                  size="lg"
                  onClick={saveResults}
                >
                  üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                </Button>
                <Button 
                  variant="secondary" 
                  size="lg"
                  onClick={() => {
                    setCurrentStep(0);
                    setFormData({
                      ideaName: '',
                      ideaDescription: '',
                      curiosity: 5,
                      need: 5,
                      ease: 5,
                      scale: 5,
                      time: 5
                    });
                  }}
                >
                  üîÑ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà
                </Button>
                <Button 
                  variant="secondary" 
                  size="lg"
                  onClick={() => window.location.hash = '#dashboard'}
                >
                  üè† ‡∏Å‡∏•‡∏±‡∏ö Dashboard
                </Button>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default IdeaValidator;