import { 
  collection,
  doc, 
  setDoc, 
  getDoc, 
  getDocs,
  updateDoc, 
  deleteDoc,
  query,
  where,
  orderBy,
  limit
} from 'firebase/firestore';
import { firestore } from './firebase';

class IdeaValidationService {
  
  /**
   * Save idea validation results to Firestore
   * @param {Object} validationData - The validation data to save
   * @returns {Promise} Document reference
   */
  async saveValidation(validationData) {
    try {
      const docId = `${validationData.userId}_${Date.now()}`;
      const docRef = doc(firestore, 'idea-validations', docId);
      
      const dataToSave = {
        ...validationData,
        id: docId,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      await setDoc(docRef, dataToSave);
      return docRef;
    } catch (error) {
      console.error('Error saving validation:', error);
      throw error;
    }
  }

  /**
   * Get all validations for a specific user
   * @param {string} userId - User ID
   * @param {number} limitCount - Limit number of results
   * @returns {Promise} Array of validation documents
   */
  async getUserValidations(userId, limitCount = 50) {
    try {
      const validationsRef = collection(firestore, 'idea-validations');
      const q = query(
        validationsRef, 
        where('userId', '==', userId),
        orderBy('createdAt', 'desc'),
        limit(limitCount)
      );
      
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error getting user validations:', error);
      throw error;
    }
  }

  /**
   * Get a specific validation by ID
   * @param {string} validationId - Validation document ID
   * @returns {Promise} Validation document data
   */
  async getValidation(validationId) {
    try {
      const docRef = doc(firestore, 'idea-validations', validationId);
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        return { id: docSnap.id, ...docSnap.data() };
      } else {
        throw new Error('Validation not found');
      }
    } catch (error) {
      console.error('Error getting validation:', error);
      throw error;
    }
  }

  /**
   * Update an existing validation
   * @param {string} validationId - Validation document ID
   * @param {Object} updateData - Data to update
   * @returns {Promise}
   */
  async updateValidation(validationId, updateData) {
    try {
      const docRef = doc(firestore, 'idea-validations', validationId);
      const dataToUpdate = {
        ...updateData,
        updatedAt: new Date().toISOString()
      };
      
      return await updateDoc(docRef, dataToUpdate);
    } catch (error) {
      console.error('Error updating validation:', error);
      throw error;
    }
  }

  /**
   * Delete a validation
   * @param {string} validationId - Validation document ID
   * @returns {Promise}
   */
  async deleteValidation(validationId) {
    try {
      const docRef = doc(firestore, 'idea-validations', validationId);
      return await deleteDoc(docRef);
    } catch (error) {
      console.error('Error deleting validation:', error);
      throw error;
    }
  }

  /**
   * Get validation statistics for a user
   * @param {string} userId - User ID
   * @returns {Promise} Statistics object
   */
  async getUserStats(userId) {
    try {
      const validations = await this.getUserValidations(userId);
      
      const stats = {
        totalValidations: validations.length,
        averageScore: 0,
        highestScore: 0,
        lowestScore: 10,
        topCategories: {
          curiosity: 0,
          need: 0,
          ease: 0,
          scale: 0,
          time: 0
        },
        recentValidations: validations.slice(0, 5)
      };

      if (validations.length > 0) {
        let totalAverage = 0;
        const categoryTotals = { curiosity: 0, need: 0, ease: 0, scale: 0, time: 0 };

        validations.forEach(validation => {
          const avgScore = validation.results?.averageScore || 0;
          totalAverage += avgScore;
          
          if (avgScore > stats.highestScore) stats.highestScore = avgScore;
          if (avgScore < stats.lowestScore) stats.lowestScore = avgScore;

          // Sum up category scores
          if (validation.scores) {
            Object.keys(categoryTotals).forEach(category => {
              categoryTotals[category] += validation.scores[category] || 0;
            });
          }
        });

        stats.averageScore = totalAverage / validations.length;
        
        // Calculate average for each category
        Object.keys(categoryTotals).forEach(category => {
          stats.topCategories[category] = categoryTotals[category] / validations.length;
        });
      }

      return stats;
    } catch (error) {
      console.error('Error getting user stats:', error);
      throw error;
    }
  }

  /**
   * Calculate CNEST score and provide recommendations
   * @param {Object} scores - CNEST scores object
   * @returns {Object} Analysis results
   */
  calculateCNESTAnalysis(scores) {
    const { curiosity, need, ease, scale, time } = scores;
    const totalScore = curiosity + need + ease + scale + time;
    const averageScore = totalScore / 5;

    let verdict = '';
    let recommendation = '';
    let riskLevel = 'low';
    const strengths = [];
    const improvements = [];

    // Score Analysis
    const scoreNames = {
      curiosity: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à',
      need: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
      ease: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢',
      scale: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏ç‡πà‡πÇ‡∏ï',
      time: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤'
    };

    // Find strengths (score >= 7) and improvements (score <= 4)
    Object.entries(scores).forEach(([key, score]) => {
      if (score >= 7) {
        strengths.push(scoreNames[key]);
      } else if (score <= 4) {
        improvements.push(scoreNames[key]);
      }
    });

    // Overall Verdict based on average score
    if (averageScore >= 8) {
      verdict = 'üöÄ ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏à‡πã‡∏á! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢';
      recommendation = '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ MVP (Minimum Viable Product) ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á';
      riskLevel = 'low';
    } else if (averageScore >= 6.5) {
      verdict = 'üëç ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏≤‡∏á‡∏à‡∏∏‡∏î';
      recommendation = '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏ç‡πà ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô';
      riskLevel = 'medium';
    } else if (averageScore >= 5) {
      verdict = 'ü§î ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏´‡∏°‡πà';
      recommendation = '‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà';
      riskLevel = 'medium';
    } else {
      verdict = '‚ö†Ô∏è ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á';
      recommendation = '‡∏Ñ‡∏ß‡∏£‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ';
      riskLevel = 'high';
    }

    // Specific recommendations based on weak areas
    const specificRecommendations = [];
    
    if (need <= 4) {
      specificRecommendations.push('üîç ‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏∂‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ');
    }
    if (curiosity <= 4) {
      specificRecommendations.push('‚ú® ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠');
    }
    if (ease <= 4) {
      specificRecommendations.push('‚ö° ‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Å‡πà‡∏≠‡∏ô');
    }
    if (scale <= 4) {
      specificRecommendations.push('üìà ‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢');
    }
    if (time <= 4) {
      specificRecommendations.push('‚è∞ ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏ß‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏≤');
    }

    return {
      totalScore,
      averageScore: Math.round(averageScore * 10) / 10,
      verdict,
      recommendation,
      riskLevel,
      strengths,
      improvements,
      specificRecommendations
    };
  }
}

// Create a singleton instance
const ideaValidationService = new IdeaValidationService();

export default ideaValidationService;